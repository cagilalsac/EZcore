@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
@:@@using EZcore.Models
@:@@using EZcore.Extensions
    var viewModel = "@model " + Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1] + "Model";
    bool dateTimePickerFound = false;
}

@viewModel

@@* Generated from EZcore Template. *@@
@@* Model namespace using directive should be added to _ViewImports.cshtml. *@@

@{
@:@@{
    @:// ViewData:
    @:var lang = (Lang)(ViewData["Lang"] ?? 0);
    @:var modelName = ViewData["ViewModelName"];
    @:var containerDivClass = "container-fluid"; // "container" can be used for not full width
    @:var dateTimePickerClass = "datepicker"; // "datetimepicker" can be used for date with time
    @:var edit = lang == Lang.EN ? "Edit" : "Düzenle";
    @:var delete = lang == Lang.EN ? "Delete" : "Sil";
    @:var select = lang == Lang.EN ? "-- Select --" : "-- Seçiniz --";
    @:var save = lang == Lang.EN ? "Save" : "Kaydet";
    @:var clear = lang == Lang.EN ? "Clear" : "Temizle";
    @:var backToList = lang == Lang.EN ? "Back to List" : "Listeye Dön";
@:}
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = $"{modelName} {edit}";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@@($"{modelName} {edit}")</title>
@:</head>
@:<body>
    }
@:@@if (Model is not null)
@:{
@:<div class="@@containerDivClass">
    @:<partial name="_EZMessage" />
    @:<form asp-action="@Model.ViewName" autocomplete="off">
	    @:@@Html.AntiForgeryToken()
        @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
{
    if (property.PropertyName != "Guid" && property.PropertyName != "IsDeleted" && property.PropertyName != "CreateDate" && property.PropertyName != "CreatedBy" && property.PropertyName != "UpdateDate" && property.PropertyName != "UpdatedBy")
    {
    if (property.IsPrimaryKey)
    {
        @:<input type="hidden" asp-for="Record.@property.PropertyName" />
        continue;
    }
    if (property.Scaffold)
    {
        if (property.IsReadOnly)
        {
            continue;
        }
        if (property.IsForeignKey)
        {
        @:<div class="row mb-3">
            @:<label asp-for="@(property.PropertyName.Remove(property.PropertyName.Length - 2))" class="col-2 col-form-label fw-bold"></label>
            @:<div class="col-10">
	            @:<select asp-for="Record.@property.PropertyName" class="form-select select2" asp-items="ViewBag.@property.PropertyName">
		            @:<option value="">@@select</option>
	            @:</select>
	            @:<span asp-validation-for="Record.@property.PropertyName" class="text-danger"></span>
            @:</div>
        @:</div>
            continue;
        }
        if (property.TypeName.Equals(typeof(bool).FullName) || property.TypeName.Equals(typeof(bool?).FullName))
        {
        @:<div class="row mb-3">
		    @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
		    @:<div class="col-10 pt-2">
			    @:<input class="form-check-input" asp-for="Record.@property.PropertyName" />
            @:</div>
        @:</div>
        }
        else if (property.IsEnum && !property.IsEnumFlags)
        {
        @:@@{
            @:var selectList@(property.PropertyName) = new SelectList(new @(property.PropertyName)().ToDictionary().Select(i => new SelectListItem(i.Value, i.Key.ToString())), "Value", "Text");
        @:}
        @:<div class="row mb-3">
            @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
            @:<div class="col-10">
                @:<select asp-for="Record.@property.PropertyName" class="form-select" asp-items="selectList@(property.PropertyName)"></select>
            @:</div>
        @:</div>
        }
        else if (property.TypeName.Equals(typeof(DateTime).FullName) || property.TypeName.Equals(typeof(DateTime?).FullName))
        {
            dateTimePickerFound = true;
        @:<div class="row mb-3">
            @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
	        @:<div class="col-10">
		        @:<input asp-for="Record.@property.PropertyName" class="form-control @@dateTimePickerClass" type="text" />
		        @:<span asp-validation-for="Record.@property.PropertyName" class="text-danger"></span>
	        @:</div>
        @:</div>
        }
        else
        {
        @:<div class="row mb-3">
            @:<label asp-for="@property.PropertyName" class="col-2 col-form-label fw-bold"></label>
	        @:<div class="col-10">
	            @:<input asp-for="Record.@property.PropertyName" class="form-control" />
		        @:<span asp-validation-for="Record.@property.PropertyName" class="text-danger"></span>
	        @:</div>
        @:</div>
        }
    }
    }
}
@:
@:@@* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. *@@
        @:@@*
        @:<div class="row mb-3">
            @:<label asp-for="{Entity}s" class="col-2 col-form-label fw-bold"></label>
	        @:<div class="col-10">
		        @:<select multiple asp-for="Record.{Entity}Ids" class="form-select select2" asp-items="ViewBag.{Entity}Ids"></select>
		        @:<span asp-validation-for="Record.{Entity}Ids" class="text-danger"></span>
	        @:</div>
        @:</div>
        @:*@@
@:
        @:<hr />
        @:<div class="row mb-3">
	        @:<div class="offset-2 col-10">
                @:<button type="submit" class="btn btn-primary">@@save</button>
		        @:&nbsp;&nbsp;
                @:<button type="reset" class="btn btn-outline-primary">@@clear</button>
		        @:&nbsp;&nbsp;
                @:<a asp-action="Delete" asp-route-id="@@Model.Record.Id">@@delete</a>
                @:&nbsp;&nbsp;
		        @:<a asp-action="Index" asp-route-pageordersession="true">@@backToList</a>
	        @:</div>
        @:</div>
    @:</form>
@:</div>
@:}
}
@{
if (Model.ReferenceScriptLibraries || dateTimePickerFound)
{
@:
@:@@section Scripts {
if (Model.ReferenceScriptLibraries)
{
    @:@@*<partial name="_ValidationScriptsPartial" />*@@ @@* EZ Attributes only work with server-side validation. *@@
}
if (dateTimePickerFound)
{
    @:<partial name="_EZDateTimePicker" />
}
    @:<partial name="_EZSelect2" />
@:}
}
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}