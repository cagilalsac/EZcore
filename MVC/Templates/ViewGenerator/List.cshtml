@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
@:@@using EZcore.Models
    var viewEnumerable = GetEnumerableTypeExpression(Model.ViewDataTypeName);
    var viewModel = "@model " + viewEnumerable;
}

@viewModel

@@* Generated from EZcore Template. *@@
@@* Model namespace using directive should be added to _ViewImports.cshtml. *@@

@{
@:@@{
    @:// ViewData:
    @:var lang = (Lang)(ViewData["Lang"] ?? 0);
    @:var modelName = ViewData["ViewModelName"];
    @:var containerDivClass = "container-fluid"; // "container" can be used for not full width
    @:var list = lang == Lang.EN ? "List" : "Listesi";
    @:var details = lang == Lang.EN ? "Details" : "Detay";
    @:var create = lang == Lang.EN ? "Create" : "Yeni";
    @:var edit = lang == Lang.EN ? "Edit" : "Düzenle";
    @:var delete = lang == Lang.EN ? "Delete" : "Sil";
    @:var pageOrder = ViewData["PageOrder"] is null ? null : ViewData["PageOrder"] as PageOrder;
@:}
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = $"{modelName} {list}";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@@($"{modelName} {list}")</title>
@:</head>
@:<body>
    }
@:
@:@@if (Model is not null)
@:{
@:<form asp-action="@Model.ViewName" autocomplete="off" id="form">
    @:<div class="@@containerDivClass">
        @:<div class="row">
            @:<div class="col-10">
                @:<partial name="_EZMessage" />
            @:</div>
            @:<div class="col-2 text-end">
                @:<a asp-action="Create">@@create</a>
            @:</div>
        @:</div>
        @:@@if (pageOrder is not null)
        @:{
        @:<partial name="_EZPageOrder" model="pageOrder" />  
        @:}
        @:<table class="table table-bordered table-striped table-hover">
            @:<thead class="table-secondary">
                @:<tr>
                Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                {
                    if (item.Name != "Guid" && item.Name != "IsDeleted" && item.Name != "CreateDate" && item.Name != "CreatedBy" && item.Name != "UpdateDate" && item.Name != "UpdatedBy")
                    {
                    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                    {
                    <th>
                        @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                    </th>
                    }
                    else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                    {
                    <th>
                        @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                    </th>
                    }
                    }
                }
                    @:<th></th>
                @:</tr>
            @:</thead>
            @:<tbody>
		        @:@@foreach (var item in Model) {
				@:<tr>
				foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
				{
                    if (item.Name != "Guid" && item.Name != "IsDeleted" && item.Name != "CreateDate" && item.Name != "CreatedBy" && item.Name != "UpdateDate" && item.Name != "UpdatedBy")
                    {
					if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
						&& property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
					{
					<td>
						@@Html.Raw(item.@GetValueExpression(property))
					</td>
					}
					else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
					{
					<td>
						@@Html.Raw(item.@GetValueExpression(navigation))
					</td>
					}
                    }
				}
				string pkName = GetPrimaryKeyName();
				if (pkName != null)
				{
					@:<td class="text-end w-25">
						@:<a asp-action="Details" asp-route-id="@@item.Record.@pkName">@@details</a>&nbsp;|&nbsp;
						@:<a asp-action="Edit" asp-route-id="@@item.Record.@pkName">@@edit</a>&nbsp;|&nbsp;
                        @:<a href="#" onclick="deleteRecord(@@item.Record.@pkName);">@@delete</a>
					@:</td>
				}
				else
				{
					<td class="text-end w-25">
						@@Html.ActionLink("Details", "Details", new { /* id = item.Record.PrimaryKey */ })&nbsp;|&nbsp;
						@@Html.ActionLink("Edit", "Edit", new { /* id = item.Record.PrimaryKey */ })&nbsp;|&nbsp;
						@@Html.ActionLink("Delete", "Delete", new { /* id = item.Record.PrimaryKey */ })
					</td>
				}
				@:</tr>
		        @:}
            @:</tbody>
        @:</table>
    @:</div>
@:</form>
@:}
@:
@:@@section Scripts {
    @:<partial name="_EZAlertify" />
    @:@@if (pageOrder is not null)
    @:{
    @:<partial name="_EZPageOrderScripts" />
    @:}
@:}
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName.Split('.')[typeName.Split('.').Length - 1] + "Model>";
    }
}