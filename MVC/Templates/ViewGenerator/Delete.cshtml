@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
@:@@using EZcore.Extensions
    var entity = Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1];
    var viewModel = "@model " + entity + "Model";
    bool mainFileFound = false;
}

@viewModel

@@* Generated from EZcore Template. *@@
@@* Model namespace using directive should be added to _ViewImports.cshtml. *@@

@{
@:@@{
    @:// ViewData:
    @:var lang = (Lang)(ViewData[nameof(Lang)] ?? 0);
    @:var modelName = ViewData["ViewModelName"];
    @:var containerDivClass = "container-fluid"; // "container" can be used for not full width
    @:var delete = lang == Lang.EN ? "Delete" : "Sil";
    @:var save = lang == Lang.EN ? "Yes" : "Evet";
    @:var backToList = lang == Lang.EN ? "No" : "Hayır";
    @:var question = lang == Lang.EN ? "Are you sure you want to delete?" : "Kaydı silmek istediğinize emin misiniz?";
    @:var deleteFile = lang == Lang.EN ? "Delete File" : "Dosya Sil";
    @:var filesStyle = "height:370px;overflow-y:auto;overflow-x:hidden;";
    @:var mainFileMessage = lang == Lang.EN ? "Other files must be deleted first!" : "Önce diğer dosyalar silinmelidir!";
@:}
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = $"{modelName} {delete}";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@@($"{modelName} {delete}")</title>
@:</head>
@:<body>
    }
}
@{
@:@@if (Model is not null)
@:{
@:<div class="@@containerDivClass">
    @:<partial name="_EZmessage" />
Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
{
    if (item.Name != "Guid" && item.Name != "IsDeleted" && item.Name != "CreateDate" && item.Name != "CreatedBy" && item.Name != "UpdateDate" && item.Name != "UpdatedBy" && item.Name != "OtherFilePaths")
    {
    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
    {
    if (item.Name == "MainFilePath")
    {
        mainFileFound = true;
    <hr />
    <div style="@@filesStyle">
        <div class="row mb-3">
            <div class="col-2 fw-bold">
                @@Html.DisplayNameFor(model => model.MainFormFile, lang)
            </div>
            @{
            @:@@if (string.IsNullOrWhiteSpace(Model.Record.MainFilePath))
            @:{
            @:<div class="col-4">
                @:<span><i class="bx bx-image" style="font-size:xx-large;"></i></span>
            @:</div>
            @:}
            @:else
            @:{
            @:<div class="col-4">
                @:<a asp-action="Download" asp-route-path="@@Model.Record.MainFilePath"><img src="@@Model.Record.MainFilePath" class="img-fluid" /></a>
                @:<br />
                @:<span class="text-danger mainfilemessage"></span>
            @:</div>
            @:<div class="col-6 text-end pe-12">
                @:<a asp-action="DeleteFile" asp-route-id="@@Model.Record.Id" asp-route-path="@@Model.Record.MainFilePath" class="deletemainfile">@@deleteFile</a>
            @:</div>
            @:}
            }
        </div>
        <hr />
        <div class="row mb-3">
            <div class="col-2 fw-bold">
                @@Html.DisplayNameFor(model => model.OtherFormFiles, lang)
            </div>
            <div class="col-10">
            @{
            @:@@if (Model.Record.OtherFilePaths is not null && Model.Record.OtherFilePaths.Any())
            @:{
            @:foreach (var otherFilePath in Model.Record.OtherFilePaths)
            @:{
                @:<div class="row">
                    @:<div class="col-4">
                        @:<a asp-action="Download" asp-route-path="@@otherFilePath"><img src="@@otherFilePath" class="img-fluid" /></a>
                        @:<input type="hidden" value="@@otherFilePath" class="otherfiles" />
                    @:</div>
                    @:<div class="col-8 text-end pe-12">
                        @:<a asp-action="DeleteFile" asp-route-id="@@Model.Record.Id" asp-route-path="@@otherFilePath">@@deleteFile</a>
                    @:</div>
                @:</div>
                @:<hr />
            @:}
            @:}
            @:else
            @:{
                @:<span><i class="bx bx-image" style="font-size:xx-large;"></i></span>
            @:}
            }
            </div>
        </div> 
    </div>
    }
    else
    {
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @@Html.DisplayNameFor(model => model.@GetValueExpression(property), lang)
        </div>
        <div class="col-10">
            @@Html.Raw(Model.@GetValueExpression(property))
        </div>
    </div>
    }
    }
    else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
    {
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation), lang)
        </div>
        <div class="col-10">
            @@Html.Raw(Model.@GetValueExpression(navigation))
        </div>
    </div>
    }
    }
}
@:
@:@@* Can be uncommented and used for many to many relationships. Entity must be replaced with the related name in the controller and views. *@@
    @:@@*
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            <b>@@Html.DisplayNameFor(model => model.{Entity}s, lang)</b>
        </div>
        <div class="col-10">
            @@Html.Raw(Model.{Entity}s)
        </div>
    </div>
    @:*@@
@:
    @:<hr />
    @:<h5 class="text-danger">@@question</h5>
    @:<form asp-action="@Model.ViewName">
	    @:@@Html.AntiForgeryToken()
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.IsPrimaryKey)
        {
        @:<input type="hidden" asp-for="Record.@GetValueExpression(property)" />
        }
    }
        @:<button type="submit" class="btn btn-danger">@@save</button>&nbsp;&nbsp;
        @:<a asp-action="Index" asp-route-session="true" class="btn btn-outline-danger">@@backToList</a>
    @:</form>
@:</div>
@:}
if (mainFileFound)
{
@:
@:@@section Scripts {
    @:<script>
        @:$(function () {
            @:$('.deletemainfile').click(function (event) {
                @:var preventEvent = false;
                @:if ($('.mainfile').val() != '') {
                    @:$('.otherfiles').each(function () {
                        @:if ($(this).val() != '') {
                            @:preventEvent = true;
                        @:}
                    @:});
                @:}
                @:if (preventEvent) {
                    @:event.preventDefault();
                    @:$('.mainfilemessage').text('@@Html.Raw(mainFileMessage)');
                @:}
            @:});
        @:});
    @:</script>
@:}
}
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}